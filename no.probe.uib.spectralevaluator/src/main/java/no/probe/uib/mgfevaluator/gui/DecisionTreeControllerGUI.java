/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package no.probe.uib.mgfevaluator.gui;

import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import no.probe.uib.mgfevaluator.model.TraningDataset;
import no.probe.uib.spectraev.ml.BreastCancer;
import no.probe.uib.spectraev.ml.MassSpectrometryData;
import org.jfree.data.statistics.HistogramDataset;
import smile.base.cart.SplitRule;
import smile.classification.DecisionTree;
import smile.math.MathEx;
import smile.regression.RegressionTree;
import smile.validation.ClassificationValidations;
import smile.validation.CrossValidation;
import smile.validation.LOOCV;
import smile.validation.RegressionMetrics;
import smile.validation.RegressionValidation;
import smile.validation.RegressionValidations;

/**
 *
 * @author yfa041
 */
public class DecisionTreeControllerGUI extends javax.swing.JFrame {

    /**
     * Creates new form DecisionTreeControllerGUI
     */
    public DecisionTreeControllerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        maxDepthText = new javax.swing.JTextField();
        nodeSizeText = new javax.swing.JTextField();
        maxNodesNumberText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        decisionTreeResultsLabel = new javax.swing.JLabel();
        AccDepthPlotPanel = new javax.swing.JPanel();
        AccNodeNumPlotPanel = new javax.swing.JPanel();
        AccNodeSizePlotPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        regressionTreeResultsLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AccDepthPlotPanel1 = new javax.swing.JPanel();
        AccNodeNumPlotPanel2 = new javax.swing.JPanel();
        AccNodeSizePlotPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        rTreeResultsLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        AccDepthPlotPanel2 = new javax.swing.JPanel();
        AccNodeNumPlotPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        maxDepthText.setText("jTextField1");
        maxDepthText.setMaximumSize(new java.awt.Dimension(100, 20));
        maxDepthText.setMinimumSize(new java.awt.Dimension(100, 20));
        maxDepthText.setPreferredSize(new java.awt.Dimension(100, 20));

        nodeSizeText.setText("jTextField1");
        nodeSizeText.setMaximumSize(new java.awt.Dimension(100, 20));
        nodeSizeText.setMinimumSize(new java.awt.Dimension(100, 20));
        nodeSizeText.setPreferredSize(new java.awt.Dimension(100, 20));

        maxNodesNumberText.setText("jTextField1");
        maxNodesNumberText.setMaximumSize(new java.awt.Dimension(100, 20));
        maxNodesNumberText.setMinimumSize(new java.awt.Dimension(100, 20));
        maxNodesNumberText.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel3.setText("Max Nodes");
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel2.setText("Max Depth");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel1.setText("Node Size");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 20));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Tree Controller");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxNodesNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxDepthText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nodeSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nodeSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(maxDepthText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(maxNodesNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("DTree Results ");

        decisionTreeResultsLabel.setText("jLabel6");

        AccDepthPlotPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AccDepthPlotPanel.setPreferredSize(new java.awt.Dimension(2, 119));

        javax.swing.GroupLayout AccDepthPlotPanelLayout = new javax.swing.GroupLayout(AccDepthPlotPanel);
        AccDepthPlotPanel.setLayout(AccDepthPlotPanelLayout);
        AccDepthPlotPanelLayout.setHorizontalGroup(
            AccDepthPlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccDepthPlotPanelLayout.setVerticalGroup(
            AccDepthPlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );

        AccNodeNumPlotPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AccNodeNumPlotPanelLayout = new javax.swing.GroupLayout(AccNodeNumPlotPanel);
        AccNodeNumPlotPanel.setLayout(AccNodeNumPlotPanelLayout);
        AccNodeNumPlotPanelLayout.setHorizontalGroup(
            AccNodeNumPlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );
        AccNodeNumPlotPanelLayout.setVerticalGroup(
            AccNodeNumPlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );

        AccNodeSizePlotPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AccNodeSizePlotPanelLayout = new javax.swing.GroupLayout(AccNodeSizePlotPanel);
        AccNodeSizePlotPanel.setLayout(AccNodeSizePlotPanelLayout);
        AccNodeSizePlotPanelLayout.setHorizontalGroup(
            AccNodeSizePlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccNodeSizePlotPanelLayout.setVerticalGroup(
            AccNodeSizePlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 115, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AccDepthPlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decisionTreeResultsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(AccNodeNumPlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AccNodeSizePlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(decisionTreeResultsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AccDepthPlotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccNodeNumPlotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AccNodeSizePlotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        regressionTreeResultsLabel.setText("jLabel6");

        jLabel6.setText("RTree Results ");

        AccDepthPlotPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AccDepthPlotPanel1.setPreferredSize(new java.awt.Dimension(2, 119));

        javax.swing.GroupLayout AccDepthPlotPanel1Layout = new javax.swing.GroupLayout(AccDepthPlotPanel1);
        AccDepthPlotPanel1.setLayout(AccDepthPlotPanel1Layout);
        AccDepthPlotPanel1Layout.setHorizontalGroup(
            AccDepthPlotPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccDepthPlotPanel1Layout.setVerticalGroup(
            AccDepthPlotPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );

        AccNodeNumPlotPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AccNodeNumPlotPanel2Layout = new javax.swing.GroupLayout(AccNodeNumPlotPanel2);
        AccNodeNumPlotPanel2.setLayout(AccNodeNumPlotPanel2Layout);
        AccNodeNumPlotPanel2Layout.setHorizontalGroup(
            AccNodeNumPlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccNodeNumPlotPanel2Layout.setVerticalGroup(
            AccNodeNumPlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );

        AccNodeSizePlotPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AccNodeSizePlotPanel2Layout = new javax.swing.GroupLayout(AccNodeSizePlotPanel2);
        AccNodeSizePlotPanel2.setLayout(AccNodeSizePlotPanel2Layout);
        AccNodeSizePlotPanel2Layout.setHorizontalGroup(
            AccNodeSizePlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccNodeSizePlotPanel2Layout.setVerticalGroup(
            AccNodeSizePlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 115, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regressionTreeResultsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AccNodeSizePlotPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccNodeNumPlotPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccDepthPlotPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regressionTreeResultsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AccDepthPlotPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccNodeNumPlotPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AccNodeSizePlotPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        rTreeResultsLabel1.setText("jLabel6");

        jLabel7.setText(" Results ");

        AccDepthPlotPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AccDepthPlotPanel2.setPreferredSize(new java.awt.Dimension(2, 119));

        javax.swing.GroupLayout AccDepthPlotPanel2Layout = new javax.swing.GroupLayout(AccDepthPlotPanel2);
        AccDepthPlotPanel2.setLayout(AccDepthPlotPanel2Layout);
        AccDepthPlotPanel2Layout.setHorizontalGroup(
            AccDepthPlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccDepthPlotPanel2Layout.setVerticalGroup(
            AccDepthPlotPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 186, Short.MAX_VALUE)
        );

        AccNodeNumPlotPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout AccNodeNumPlotPanel3Layout = new javax.swing.GroupLayout(AccNodeNumPlotPanel3);
        AccNodeNumPlotPanel3.setLayout(AccNodeNumPlotPanel3Layout);
        AccNodeNumPlotPanel3Layout.setHorizontalGroup(
            AccNodeNumPlotPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AccNodeNumPlotPanel3Layout.setVerticalGroup(
            AccNodeNumPlotPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rTreeResultsLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AccNodeNumPlotPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccDepthPlotPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rTreeResultsLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AccDepthPlotPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccNodeNumPlotPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Prediction");

        jButton2.setText("Run");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(242, 242, 242)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        updateTreeTraning();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        predectData();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecisionTreeControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecisionTreeControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecisionTreeControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecisionTreeControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DecisionTreeControllerGUI().setVisible(true);
        });
    }
    private MassSpectrometryData msData;
    private RegressionTree regressionTree;
    private DecisionTree decisionTree;
    private TreeMap<Integer, Double> depthAccuMap = new TreeMap<>();
    private TreeMap<Integer, Double> nodenumberAccuMap = new TreeMap<>();
    private TreeMap<Integer, Double> nodesizeAccuMap = new TreeMap<>();

    public void runTreeAnalyzer(TraningDataset traniningData, TraningDataset sampleData) {

        msData = new MassSpectrometryData(traniningData, sampleData);
        System.out.println("DecisionTree model");
        MathEx.setSeed(19650218); // to get repeatable results.

    
        this.nodeSizeText.setText(2+ "");
        this.maxDepthText.setText((traniningData.getRowNames().length / 10) + "");
        this.maxNodesNumberText.setText(traniningData.getColumnNames().length+ "");
        this.decisionTreeResultsLabel.setText("");
        this.regressionTreeResultsLabel.setText("");
        this.setVisible(true);

//        DecisionTree model = DecisionTree.fit(msData.formula, msData.train, SplitRule.ENTROPY, 100, 500, 5);
//         DecisionTree model = DecisionTree.fit(msData.formula, msData.train);
    }

    private void updateTreeTraning() {

        int maxnodes = Integer.parseInt(maxNodesNumberText.getText());
        int maxdeep = Integer.parseInt(maxDepthText.getText());;
        int nodesize = Integer.parseInt(nodeSizeText.getText());;//5;   
        try {
            decisionTree = DecisionTree.fit(msData.formula, msData.train, SplitRule.ENTROPY, maxnodes, maxdeep, nodesize);
            decisionTree.prune(msData.train);
            ClassificationValidations<DecisionTree> result = CrossValidation.classification(10, msData.formula, msData.train,
                    (f, x) -> decisionTree);
//            decisionTreeResultsLabel.setText(result.toString());
            double[] importance = decisionTree.importance();
            TreeMap<Double, String> decisionTreeImportancy = new TreeMap<>();
            for (int i = 0; i < importance.length; i++) {
                if (importance[i] > 0) {
                    decisionTreeImportancy.put(importance[i], decisionTree.schema().name(i));
                }
            }
            System.out.println("decision tree: " + result);
            System.out.println("<<<<<<<<<<<<<<<<<<<<Regression tree>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

            regressionTree = RegressionTree.fit(msData.formula, msData.train, maxnodes, maxdeep, nodesize);

            //create decionMap
            Map<Double, String> finalDecisionMap2 = new HashMap<>();
            for (int i = 0; i < msData.y_reg.length; i++) {
                if (!finalDecisionMap2.containsKey(msData.y_reg[i])) {
                    finalDecisionMap2.put(msData.y_reg[i], msData.train.getString(i, "Class"));
                }
                if (finalDecisionMap2.size() == 2) {
                    break;
                }
            }
            double[] importance2 = regressionTree.importance();//
            TreeMap<Double, String> regressionTreeImportancy = new TreeMap<>();
            for (int i = 0; i < importance2.length; i++) {
                regressionTreeImportancy.put(importance2[i], regressionTree.schema().name(i));
            }

            double[] selfPrediction = regressionTree.predict(msData.train);

            int errorCount = 0;
            for (int i = 0; i < selfPrediction.length; i++) {
                double roundPredection = Math.round(selfPrediction[i]);
                if (roundPredection != msData.y_reg[i]) {
                    errorCount++;
                }
            }
            double acc = (double) (msData.y_reg.length - errorCount) / (double) msData.y_reg.length;
            acc = acc * 100.0;
            System.out.println("at self calc accracy " + (acc) + " %");
            RegressionValidations<RegressionTree> regresult = CrossValidation.regression(10, msData.formula, msData.train, (f, x) -> regressionTree);
            System.out.println("regresult " + regresult);
//
//            RegressionMetrics metrics = LOOCV.regression(msData.formula, msData.train, (formula, x) -> regressionTree);
//            System.out.println("regression tree 2 : " + metrics);
//
//            RegressionValidation validation = new RegressionValidation(regressionTree, msData.y_reg, selfPrediction, metrics);
//            System.out.println("validation " + validation);
     
//            RegressionValidations<RegressionTree> regresult = CrossValidation.(10, msData.formula, msData.train, (f, x) -> regressionTree);
        } catch (Exception e) {
            e.printStackTrace();
        }

//        JFreeChart histogram = ChartFactory.createHistogram("Prediction", "Data", "Frequency", dataset, PlotOrientation.VERTICAL, true, true, true);
//        // add the chart to a panel...
//        ChartPanel chartPanel = new ChartPanel(histogram);
//        JFrame f = new JFrame();
//        f.setSize(500, 500);
//        f.add(chartPanel);
//        f.repaint();
//        f.setVisible(true);
//      
        /**
         * *random forest test**
         */
//        System.out.println("<<<<<<<<<<<<<<<<<<<<random forest  tree>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
//
//        RandomForest model3 = RandomForest.fit(msData.formula, msData.train);
//        //create decionMap
//        Map<Double, String> finalDecisionMap3 = new HashMap<>();
//        for (int i = 0; i < msData.y_reg.length; i++) {
//            if (!finalDecisionMap3.containsKey(msData.y_reg[i])) {
//                System.out.println("at i " + i + "  " + msData.y_reg[i] + "  " + msData.y[i]);
//                finalDecisionMap3.put(msData.y_reg[i], msData.train.getString(i, "Class"));
//            }
//            if (finalDecisionMap3.size() == 2) {
//                break;
//            }
////            System.out.println(" i " + i + "  " + msData.y[i] + "   " + msData.train.getString(i, "Class"));
//        }
//        System.out.println(finalDecisionMap3.size() + "  -- at final des map " + finalDecisionMap3);
//        double[] importance3 = model3.importance();//
//        TreeMap<Double, String> regressionTreeImportancy2 = new TreeMap<>();
//        for (int i = 0; i < importance3.length; i++) {
//            regressionTreeImportancy2.put(importance3[i], model3.schema().name(i));
//        }
//
//        k = 0;
//        for (double d : regressionTreeImportancy2.keySet()) {
//            if (!existMeasurment.contains((regressionTreeImportancy2.get(d)))) {
//                System.out.println(k + " at ----------------------------------------------------------------->>>" + (regressionTreeImportancy2.get(d)) + "  --- " + ((int) d));
//                k++;
//            }
//
//        }
//        int[] prediction3 = model3.predict(msData.test);
//        errorCount = 0;
//        for (int i = 0; i < prediction2.length; i++) {
////            double roundPredection = Math.round(prediction2[i]);
//            if (prediction2[i] != msData.testy_reg[i]) {
//                errorCount++;
//            }
//        }
//        double accur3 = (double) (msData.testx.length - errorCount) / (double) msData.testx.length;
//        System.out.println("acc: " + (accur3 * 100) + "%   error 1 " + errorCount + "   " + regressionTreeImportancy2.size());
    }

    private void predectData() {
        Map<Integer, String> finalDecisionMap = new HashMap<>();
        for (int i = 0; i < msData.y.length; i++) {
            if (!finalDecisionMap.containsKey(msData.y[i])) {
                finalDecisionMap.put(msData.y[i], msData.train.getString(i, "Class"));
            }
            if (finalDecisionMap.size() == 2) {
                break;
            }
        }
        int[] prediction = decisionTree.predict(msData.test);

        int errorCount = 0;
        int falsePostive = 0;
        int falseNegative = 0;
        int truePostive = 0;
        int trueNegative = 0;
        for (int i = 0; i < prediction.length; i++) {
            if (prediction[i] != msData.testy[i]) {
                errorCount++;
                if (finalDecisionMap.get(prediction[i]).equalsIgnoreCase("Identified")) {
                    falsePostive++;
                } else {
                    falseNegative++;
                }
            } else {
                if (finalDecisionMap.get(prediction[i]).equalsIgnoreCase("Identified")) {
                    truePostive++;
                } else {
                    trueNegative++;
                }
            }

        }
        double accur = (double) (msData.testx.length - errorCount) / (double) msData.testx.length;
        int error = smile.validation.metric.Error.of(msData.testy, prediction);
        System.out.println("1. acc: " + (accur * 100) + "%   FP " + falsePostive + "  TP " + truePostive + " /   FN " + falseNegative + "  TN " + trueNegative);
//        for (Group g : sampleData.getSourceDataset().getRowGroups()) {
//            System.out.println("at " + g.getName() + "   " + g.getMembers().length);
//        }

        double[] prediction2 = regressionTree.predict(msData.test);
        errorCount = 0;
        falsePostive = 0;
        falseNegative = 0;
        truePostive = 0;
        trueNegative = 0;
        for (int i = 0; i < prediction2.length; i++) {
            double roundPredection = Math.round(prediction2[i]);
            if (roundPredection != msData.testy_reg[i]) {
                errorCount++;
                if (finalDecisionMap.get((int) roundPredection).equalsIgnoreCase("Identified")) {
                    falsePostive++;
                } else {
                    falseNegative++;
                }
            } else {
                if (finalDecisionMap.get((int) roundPredection).equalsIgnoreCase("Identified")) {
                    truePostive++;
                } else {
                    trueNegative++;
                }
            }

        }

        double accur2 = (double) (msData.testx.length - errorCount) / (double) msData.testx.length;

        System.out.println("2. acc: " + (accur2 * 100) + "%   FP " + falsePostive + "  TP " + truePostive + " /   FN " + falseNegative + "  TN " + trueNegative);

        HistogramDataset dataset = new HistogramDataset();

        dataset.addSeries(
                "Prediction", prediction2, 20);
        dataset.addSeries(
                "data", msData.testy_reg, 20);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AccDepthPlotPanel;
    private javax.swing.JPanel AccDepthPlotPanel1;
    private javax.swing.JPanel AccDepthPlotPanel2;
    private javax.swing.JPanel AccNodeNumPlotPanel;
    private javax.swing.JPanel AccNodeNumPlotPanel2;
    private javax.swing.JPanel AccNodeNumPlotPanel3;
    private javax.swing.JPanel AccNodeSizePlotPanel;
    private javax.swing.JPanel AccNodeSizePlotPanel2;
    private javax.swing.JLabel decisionTreeResultsLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField maxDepthText;
    private javax.swing.JTextField maxNodesNumberText;
    private javax.swing.JTextField nodeSizeText;
    private javax.swing.JLabel rTreeResultsLabel1;
    private javax.swing.JLabel regressionTreeResultsLabel;
    // End of variables declaration//GEN-END:variables
}

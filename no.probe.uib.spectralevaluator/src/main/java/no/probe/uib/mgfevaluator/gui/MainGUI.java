/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package no.probe.uib.mgfevaluator.gui;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import no.probe.uib.mgfevaluator.model.DatasetInfo;
import no.uib.jsparklines.extra.NimbusCheckBoxRenderer;

/**
 *
 * @author Yehia Mokhtar Farag
 */
public abstract class MainGUI extends javax.swing.JFrame {

    private final JFileChooser browserDialog;
    private File PSExportSearchFile;
    private File cmsFile;

    private File selectedMzIdFile;
    private File selectedMzMLFile;
    private final ExecutorService executorService;

    private final Map<String, HashSet<String>> userselection;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        this.executorService = new ThreadPoolExecutor(2, 2, 20L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        initComponents();
        jTable1.getColumn("Traning data").setCellRenderer(new NimbusCheckBoxRenderer());
        jTable1.getColumn("Sample data").setCellRenderer(new NimbusCheckBoxRenderer());
//        MainGUI.this.setSize(800, 200);
        browserDialog = new JFileChooser("D:\\Manuscripts\\manuscript 2022\\Search_1_nomod\\Search_1_nomod.mzid");       //FileSystemView.getFileSystemView().getHomeDirectory()    
        jTable1.setEnabled(false);
        jTable1.setVisible(false);
        addDatasetBtn.setEnabled(false);
        addPSDataBtn.setEnabled(false);
        jButton7.setEnabled(false);
        jButton5.setEnabled(false);
        errorLabel.setForeground(Color.red);
        userselection = new HashMap<>();
        userselection.put("T", new HashSet<>());
        userselection.put("S", new HashSet<>());
        progressLabel.setVisible(false);

////        prideDataImportGUL.setVisible(false);
//        MainGUI.this.setResizable(false);
//        MainGUI.this.setMinimumSize(new java.awt.Dimension(800, 200));
//        MainGUI.this.setMaximumSize(new java.awt.Dimension(800, 200));
//        jPanel3.setMinimumSize(new java.awt.Dimension(800, 200));
//        jPanel3.setMaximumSize(new java.awt.Dimension(800, 200));
//        jPanel3.setSize(new java.awt.Dimension(800, 200));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        addDatasetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        addPSDataBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(900, 405));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 405));

        jLabel3.setFont(new java.awt.Font("Broadway", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("Spect-");

        progressLabel.setFont(new java.awt.Font("Broadway", 0, 36)); // NOI18N
        progressLabel.setForeground(new java.awt.Color(228, 115, 10));
        progressLabel.setIcon(new javax.swing.ImageIcon("D:\\Manuscripts\\manuscript 2022\\MyApps\\spectra-ev\\no.probe.uib.spectralevaluator\\source\\orange2.gif")); // NOI18N

        jLabel1.setText("Welcome to SpectraEvaluator");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel8.setText("MzML File");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("MzId File");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jButton6.setText("Browse");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        addDatasetBtn.setText("Add Dataset");
        addDatasetBtn.setMaximumSize(new java.awt.Dimension(100, 23));
        addDatasetBtn.setMinimumSize(new java.awt.Dimension(100, 23));
        addDatasetBtn.setPreferredSize(new java.awt.Dimension(100, 23));
        addDatasetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDatasetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(32, 32, 32)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(addDatasetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jButton2)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(addDatasetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Dataset", "#Spectra", "#Id", "#UnId", "Year", "Traning data", "Sample data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoscrolls(false);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setMaximumSize(new java.awt.Dimension(325, 16));
        jTable1.setMinimumSize(new java.awt.Dimension(325, 16));
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setMinWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(3).setMinWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(4).setMinWidth(100);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(5).setMinWidth(100);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(6).setMinWidth(100);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(6).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(7).setMinWidth(100);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(7).setMaxWidth(100);
        }

        jButton7.setText("Run");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        errorLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));

        jLabel4.setText("PS Export");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setText(" CMS File");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton4.setText("Browse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        addPSDataBtn.setText("Add Dataset");
        addPSDataBtn.setMaximumSize(new java.awt.Dimension(100, 23));
        addPSDataBtn.setMinimumSize(new java.awt.Dimension(100, 23));
        addPSDataBtn.setPreferredSize(new java.awt.Dimension(100, 23));
        addPSDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPSDataBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(32, 32, 32)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(addPSDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(addPSDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Broadway", 0, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(228, 115, 10));
        jLabel6.setText("Ev");

        jButton3.setText("Pride Data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Cluster Trining Data");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton3))
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addPSDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPSDataBtnActionPerformed
        showProgress();
        Thread T = new Thread(() -> {
            this.addDatasetPSOutput(PSExportSearchFile, cmsFile);
            jTextField1.setText("");
            jTextField2.setText("");
            addPSDataBtn.setEnabled(false);
            progressLabel.setVisible(false);
        });
        T.start();


    }//GEN-LAST:event_addPSDataBtnActionPerformed


    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        browserDialog.resetChoosableFileFilters();
        FileFilter txtFilter = new FileFilter() {
            @Override
            public String getDescription() {
                return "only txt file allowed (*.txt)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".txt");
                }
            }
        };
        browserDialog.setFileFilter(txtFilter);
        browserDialog.addChoosableFileFilter(txtFilter);
        int returnValue = browserDialog.showOpenDialog(null);

        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION -> {
                PSExportSearchFile = browserDialog.getSelectedFile();
                if (!PSExportSearchFile.getName().toLowerCase().endsWith(".txt")) {
                    jButton1.doClick();
                    break;
                }
                jTextField1.setText(PSExportSearchFile.getAbsolutePath());
                addPSDataBtn.setEnabled(!jTextField1.getText().isEmpty() && !jTextField2.getText().isEmpty());
            }
            case JFileChooser.CANCEL_OPTION -> {
            }
            default ->
                jButton1.doClick();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        browserDialog.resetChoosableFileFilters();
        FileFilter cmsFilter = new FileFilter() {
            @Override
            public String getDescription() {
                return "only txt file allowed (*.cms)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".cms");
                }
            }
        };
        browserDialog.setFileFilter(cmsFilter);
        browserDialog.addChoosableFileFilter(cmsFilter);
        int returnValue = browserDialog.showOpenDialog(null);

        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION -> {
                cmsFile = browserDialog.getSelectedFile();
                if (!cmsFile.getName().toLowerCase().endsWith(".cms")) {
                    jButton4.doClick();
                    break;
                }
                jTextField2.setText(cmsFile.getAbsolutePath());
                addPSDataBtn.setEnabled(!jTextField1.getText().isEmpty() && !jTextField2.getText().isEmpty());
            }
            case JFileChooser.CANCEL_OPTION -> {
            }
            default ->
                jButton4.doClick();
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        browserDialog.resetChoosableFileFilters();
        FileFilter mzIdFilter = new FileFilter() {
            @Override
            public String getDescription() {
                return "only mzid file allowed (*.mzid)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".mzid");
                }
            }
        };
        browserDialog.setFileFilter(mzIdFilter);
        browserDialog.addChoosableFileFilter(mzIdFilter);
        int returnValue = browserDialog.showOpenDialog(null);
        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION -> {
                selectedMzIdFile = browserDialog.getSelectedFile();
                if (!selectedMzIdFile.getName().toLowerCase().endsWith(".mzid")) {
                    jButton2.doClick();
                    break;
                }
                jTextField5.setText(selectedMzIdFile.getAbsolutePath());
                addDatasetBtn.setEnabled(!jTextField5.getText().isEmpty() && !jTextField6.getText().isEmpty());
            }
            case JFileChooser.CANCEL_OPTION -> {
            }
            default ->
                jButton2.doClick();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        browserDialog.resetChoosableFileFilters();
        FileFilter mzIdFilter = new FileFilter() {
            @Override
            public String getDescription() {
                return "only mzml file allowed (*.mzml)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".mzml");
                }
            }
        };
        browserDialog.setFileFilter(mzIdFilter);
        browserDialog.addChoosableFileFilter(mzIdFilter);
        int returnValue = browserDialog.showOpenDialog(null);
        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION -> {
                selectedMzMLFile = browserDialog.getSelectedFile();
                if (!selectedMzMLFile.getName().toLowerCase().endsWith(".mzml")) {
                    jButton6.doClick();
                    break;
                }
                jTextField6.setText(selectedMzMLFile.getAbsolutePath());
                addDatasetBtn.setEnabled(!jTextField5.getText().isEmpty() && !jTextField6.getText().isEmpty());
            }
            case JFileChooser.CANCEL_OPTION -> {
            }
            default ->
                jButton6.doClick();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void addDatasetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDatasetBtnActionPerformed
        showProgress();
        Thread T = new Thread(() -> {
            this.processMzData(selectedMzIdFile, selectedMzMLFile);
            jTextField5.setText("");
            jTextField6.setText("");
            addDatasetBtn.setEnabled(false);
            progressLabel.setVisible(false);
        });
        T.start();
    }//GEN-LAST:event_addDatasetBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        errorLabel.setText("");
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
        int rowCount = dm.getRowCount();
//Remove rows one by one from the end of the table
        userselection.get("T").clear();
        userselection.get("S").clear();
        Set<Object[]> data = new LinkedHashSet<>();
        for (int i = 0; i < rowCount; i++) {
            Object[] row = new Object[dm.getColumnCount()];
            for (int j = 0; j < dm.getColumnCount(); j++) {
                row[j] = dm.getValueAt(i, j);
            }
            data.add(row);
        }
        boolean traning = false;
        boolean sample = false;

        for (Object[] row : data) {
            if ((boolean) row[4]) {
                traning = true;
                userselection.get("T").add(row[1].toString());
            }
            if ((boolean) row[5]) {
                sample = true;
                userselection.get("S").add(row[1].toString());
            }
        }
        if (!(sample && traning)) {
            errorLabel.setText("Select least 1 DS as traning & 1 as sample");
        } else {
            showProgress();
            Thread t = new Thread(() -> {
                jButton7.setEnabled(false);
                boolean doneSuccess = runPredection(userselection);

                if (!doneSuccess) {
                    errorLabel.setText("Error, try again");
                }
                progressLabel.setVisible(false);
                jButton7.setEnabled(true);
            });
            t.start();

        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        loadAPIDataView();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        showProgress();
        Thread t = new Thread(() -> {
            jButton7.setEnabled(false);
            boolean doneSuccess = this.clustrTraningData();

            if (!doneSuccess) {
                errorLabel.setText("Error, try again");
            }
            progressLabel.setVisible(false);
            jButton5.setEnabled(true);
        });
        t.start();


    }//GEN-LAST:event_jButton5ActionPerformed
    private void showProgress() {
        new Thread(() -> {
            try {
                progressLabel.setVisible(true);
            } catch (IndexOutOfBoundsException e) {
                // ignore
            }
        }, "ProgressDialog").start();

    }

    public void updateDatasetTable(Set<DatasetInfo> traningDatasetMap) {
        jTable1.setEnabled(true);
        jTable1.setVisible(true);
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
        int rowCount = dm.getRowCount();
//Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        Map<String, String> filteredDatasets = new TreeMap<>();
        for (DatasetInfo ds : traningDatasetMap) {
            int index = ds.getIndex();
            String dsName = ds.getAccession();
            int year = ds.getYear();
            int totalSpec = ds.getSpect_total_num();
            int idnum = ds.getIdent_num();
            int unid = ds.getUn_ident_num();  
            dm.addRow(new Object[]{index, dsName, totalSpec,idnum,unid, year, true, false});
        }
      
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToSort = 3;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
        for (int k = 0; k < dm.getRowCount(); k++) {
            int row = sorter.convertRowIndexToModel(k);
            dm.setValueAt((k + 1) + "", row, 0);
        }
        jButton7.setEnabled(!traningDatasetMap.isEmpty());
        jButton5.setEnabled(jButton7.isEnabled());

    }

    public abstract void addDatasetPSOutput(File PSSearchExport, File cmsFile);

    public abstract void processMzData(File selectedMzidFile, File selectedMzmlFile);

    public abstract boolean runPredection(Map<String, HashSet<String>> userselection);

    public abstract boolean viewPrideProjects();

    public abstract void loadAPIDataView();

    public void setErrorMessage(String message) {
        errorLabel.setText(message);
    }

    public void progress(boolean visible) {
        this.progressLabel.setVisible(visible);
    }

    public abstract boolean clustrTraningData();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDatasetBtn;
    private javax.swing.JButton addPSDataBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables

}
